{"name":"Jquery-class","tagline":"simple jquery class creation with namespacing","body":"#jQuery Class\r\n\r\nSimple and easy jquery class builder with namespacing\r\n\r\nPerequisite:\r\n\r\n* jQuery\r\n\r\nExemple:\r\n```javascript\r\nvar foo = new $.Class({\r\n        namespace: \"Foo\",\r\n\r\n        consts: {\r\n            someConstant: \"constant\"\r\n        },\r\n\r\n        someFunction: function: () {\r\n            // some code..\r\n        }\r\n    }),\r\n    bar = new $.Class({\r\n        namespace: \"Foo.Bar\"\r\n        // ...\r\n    }),\r\n    App = new $.Class(foo, bar),\r\n    runApp = new App();\r\n```\r\n\r\nfoo and bar are initially individual plugin, combining it in App this is where the fun start..\r\n            \r\nDoing thing like this, you building an App containing foo and bar where bar is in foo!\r\n\r\nTo access bar from foo you simply do \r\n```javascript \r\nthis.Bar.anyFunctionOrVar() \r\n``` \r\nor \r\n```javascript \r\nFoo.Bar.anyFunctionOrVar()\r\n```\r\n\r\nTo access foo from bar you simply do \r\n```javascript \r\nFoo.anyFunctionOrVar()\r\n```\r\n\r\nconsts are used as a constant holder where sub variable are simply a getter. If used like the exemple above, this give something like \r\n```javascript\r\nFoo.someConstant() // >> return \"constant\"\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}